// C# program to find maximum length
// Snake sequence and print it
using System;
using System.Collections.Generic;

class GFG {
	static int M = 4;
	static int N = 4;

	public class Point {
		public int x, y;

		public Point(int x, int y)
		{
			this.x = x;
			this.y = y;
		}
	};

	// Function to find maximum length Snake sequence path
	// (i, j) corresponds to tail of the snake
	static List<Point> findPath(int[, ] grid, int[, ] mat,
								int i, int j)
	{
		List<Point> path = new List<Point>();

		Point pt = new Point(i, j);
		path.Insert(0, pt);

		while (grid[i, j] != 0) {
			if (i > 0 && grid[i, j] - 1 == grid[i - 1, j]) {
				pt = new Point(i - 1, j);
				path.Insert(0, pt);
				i--;
			}
			else if (j > 0
					&& grid[i, j] - 1 == grid[i, j - 1]) {
				pt = new Point(i, j - 1);
				path.Insert(0, pt);
				j--;
			}
		}
		return path;
	}

	// Function to find maximum length Snake sequence
	static void findSnakeSequence(int[, ] mat)
	{
		// table to store results of subproblems
		int[, ] lookup = new int[M, N];

		// initialize by 0

		// stores maximum length of Snake sequence
		int max_len = 0;

		// store coordinates to snake's tail
		int max_row = 0;
		int max_col = 0;

		// fill the table in bottom-up fashion
		for (int i = 0; i < M; i++) {
			for (int j = 0; j < N; j++) {
				// do except for (0, 0) cell
				if (i != 0 || j != 0) {
					// look above
					if (i > 0
						&& Math.Abs(mat[i - 1, j]
									- mat[i, j])
							== 1) {
						lookup[i, j] = Math.Max(
							lookup[i, j],
							lookup[i - 1, j] + 1);

						if (max_len < lookup[i, j]) {
							max_len = lookup[i, j];
							max_row = i;
							max_col = j;
						}
					}

					// look left
					if (j > 0
						&& Math.Abs(mat[i, j - 1]
									- mat[i, j])
							== 1) {
						lookup[i, j] = Math.Max(
							lookup[i, j],
							lookup[i, j - 1] + 1);
						if (max_len < lookup[i, j]) {
							max_len = lookup[i, j];
							max_row = i;
							max_col = j;
						}
					}
				}
			}
		}
		Console.Write("Maximum length of Snake "
					+ "sequence is: " + max_len + "\n");

		// find maximum length Snake sequence path
		List<Point> path
			= findPath(lookup, mat, max_row, max_col);

		Console.Write("Snake sequence is:");
		foreach(Point it in path)
			Console.Write("\n" + mat[it.x, it.y] + " ("
						+ it.x + ", " + it.y + ")");
	}

	// Driver code
	public static void Main(String[] args)
	{
		int[, ] mat = { { 9, 6, 5, 2 },
						{ 8, 7, 6, 5 },
						{ 7, 3, 1, 6 },
						{ 1, 1, 1, 7 } };

		findSnakeSequence(mat);
	}
}

// This code is contributed by Princi Singh
